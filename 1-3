#1
from interfaces.securityInterface import securityInterface

class security(securityInterface):
    def __init__(self, name) -> None:
        super().__init__(name)
        self.m_name = name
        
    def getName(self) -> str:
        return self.m_name
``

#2

from interfaces.positionInterface import positionInterface
from implementations.securitySolution import security

class position(positionInterface):
    def __init__(self, sec_obj, initialPosition: int):
        if isinstance(sec_obj, str):
            self.security = security(sec_obj)
        else:
            self.security = sec_obj
            
        self.position = initialPosition
        
    def getSecurity(self):
        return self.security
    
    def getPosition(self):
        return self.position
    def setPosition(self, inputValue: int):
        if inputValue < 0:
            raise Exception()
        else:
            self.position = inputValue
        
    def addPosition(self, inputValue: int):
        newValue = self.position + inputValue
        if newValue < 0:
            raise Exception()
        else:
            self.position = newValue
            
#3


from typing import Any, Dict, Set, Iterable
from interfaces.positionInterface import positionInterface
from interfaces.accountInterface import accountInterface
from implementations.positionSolution import position

class account(accountInterface):
    def __init__(self, positions: Set[positionInterface], accountName: str) -> None:
        self.accountName = accountName
        self.positions = {} #dictionary to hold account's positions
        for p in positions: #looping through input set of positions
            sec = p.getSecurity().getName() # value for names of securities
            self.positions[sec] = p #add values already in dict with new value    {  aapl: position(aapl,100) }

    def getName(self) -> str:
        return self.accountName

    def getAllPositions(self) -> Iterable[positionInterface]:
        allPositions = set()
        for value in self.positions.values():
            allPositions.add(value)
        return allPositions

    def getPositions(self, securities: Set) -> Dict[Any, positionInterface]:
        positionDict = {}
        for s in securities:
            if isinstance(s, str):
                sec_name = s
            else:
                sec_name = s.getName()
            if sec_name in self.positions.keys():
                positionDict[s] = self.positions[sec_name]
        return positionDict
                

    def addPositions(self, positions: Set[positionInterface]) -> None:
        for s in positions:
            name = s.getSecurity().getName()
            self.positions[name] = s
    
    def removePositions(self, securities: Set) -> None:
        for s in securities:
            sec_name = s.getName()
            if sec_name in self.positions.keys():
                del self.positions[sec_name] 
        return self.positions
        
#4

from typing import Set, Iterable
from interfaces.accountInterface import accountInterface
from interfaces.securityInterface import securityInterface
from interfaces.portfolioInterface import portfolioInterface
from implementations.accountSolution import account
import implementations.portfolioSolution

class portfolio(portfolioInterface):
    def __init__(self, portfolioName: str, accounts: Set[accountInterface]) -> None:
        self.portfoliioName = portfolioName
        self.accounts = set(accounts)

    def getAllAccounts(self) -> Iterable[accountInterface]:
        return self.accounts

    def getAccounts(self, accountNamesFilter:Set[str], securitiesFilter:Set) -> Iterable[accountInterface]:
        accountList = []
        tempList = []
        if len(accountNamesFilter):
            tempList1 = []
            for acc_name in accountNamesFilter:
                tempList.append(acc_name)
            for acc in self.accounts:
                name = acc.getName()
                if name in tempList:
                    tempList1.append(acc)
                    
        if len(securitiesFilter):
            sec_list = []  
            tempList2 = []
            for sec_name in securitiesFilter:
                if isinstance(sec_name, str):
                    s_obj = sec_name
                else:
                    s_obj = sec_name.getName()
                sec_list.append(s_obj)
            for acc in self.accounts:
                p = acc.getPositions(securitiesFilter)
                for sec in sec_list:
                    if sec in p.keys():
                        tempList2.append(acc)
                        
        if tempList1 and tempList2:
            for i in tempList1:
                if i in tempList2:
                    accountList.append(i)
                return accountList
            
        elif tempList1:
            return tempList1
        
        elif tempList2:
            return tempList2

    def addAccounts(self, accounts: Set[accountInterface]) -> None:
        accountNamesList = {}
        for ac in self.accounts:
            nm = ac.getName()
            accountNamesList[nm] = ac
        for account in accounts:
            name = account.getName()
            if name in accountNamesList.keys():
                self.accounts.remove(accountNamesList[name])
                self.accounts.add(account)
            else:
                self.accounts.add(account)
            

    def removeAccounts(self, accountNames: Set[str]) -> None:
        accountNamesDict = {}
        for ac in self.accounts:
            nm = ac.getName()
            accountNamesDict[nm] = ac
        for name in accountNames:
            if name in accountNamesDict.keys():
                self.accounts.remove(accountNamesDict[name])
